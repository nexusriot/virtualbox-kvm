From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Thomas Prescher <thomas.prescher@cyberus-technology.de>
Date: Wed, 22 May 2024 22:04:32 +0200
Subject: [PATCH] NEM/KVM: add boiler plate code for nested guest checks

---
 src/VBox/VMM/VMMR3/NEMR3Native-linux.cpp | 93 +++++++++++++++++++++++-
 src/VBox/VMM/include/NEMInternal.h       |  5 ++
 2 files changed, 97 insertions(+), 1 deletion(-)

diff --git a/src/VBox/VMM/VMMR3/NEMR3Native-linux.cpp b/src/VBox/VMM/VMMR3/NEMR3Native-linux.cpp
index 0880ad2adb..07a6db2772 100644
--- a/src/VBox/VMM/VMMR3/NEMR3Native-linux.cpp
+++ b/src/VBox/VMM/VMMR3/NEMR3Native-linux.cpp
@@ -60,6 +60,7 @@
 #include <linux/kvm.h>
 
 #include <algorithm>
+#include <string_view>
 #include <vector>
 
 /*
@@ -437,6 +438,78 @@ static int nemR3LnxInitCheckCapabilities(PVM pVM, PRTERRINFO pErrInfo)
 }
 
 
+#ifdef VBOX_WITH_KVM_NESTING
+static int KvmGetGuestModeOffsetFromStatsFd(PVMCPU pVCpu, size_t *offset)
+{
+    // See https://www.kernel.org/doc/html/latest/virt/kvm/api.html to learn more
+    // about the KVM binary statistics (look for KVM_GET_STATS_FD).
+
+    struct kvm_stats_header stats_header;
+    RT_ZERO(stats_header);
+
+    int rcRead = pread(pVCpu->nem.s.statsFd, &stats_header, sizeof(struct kvm_stats_header), 0);
+    AssertReleaseMsg(rcRead == sizeof(struct kvm_stats_header), ("Unable to read stats header"));
+
+    if (offset == nullptr) {
+        printf("Invalid pointer\n");
+        return VERR_INVALID_POINTER;
+    }
+
+    int real_desc_size = sizeof(struct kvm_stats_desc) + stats_header.name_size;
+    void *desc_backing = RTMemAllocZ(real_desc_size);
+
+    int rc = VERR_NOT_IMPLEMENTED;
+
+    for (unsigned i = 0; i < stats_header.num_desc; ++i) {
+        memset(desc_backing, 0, real_desc_size);
+
+        struct kvm_stats_desc* desc = static_cast<struct kvm_stats_desc*>(desc_backing);
+        rcRead = pread(pVCpu->nem.s.statsFd, desc, real_desc_size, stats_header.desc_offset + i * real_desc_size);
+        AssertReleaseMsg(rcRead == real_desc_size, ("Unable to read descriptor"));
+
+        std::basic_string_view name(desc->name);
+        if (name == "guest_mode") {
+            unsigned value_offset = stats_header.data_offset + desc->offset;
+
+            if (desc->size != 1) {
+                LogRel(("Invalid guest_mode stat size: %d\n", desc->size * 8));
+                rc = VERR_NOT_SUPPORTED;
+                break;
+            }
+
+            *offset = value_offset;
+
+            rc = VINF_SUCCESS;
+            break;
+        }
+    }
+
+    RTMemFree(desc_backing);
+    return rc;
+}
+#endif
+
+bool KvmIsNestedGuestExit(PVM pVM, PVMCPU pVCpu)
+{
+#ifdef VBOX_WITH_KVM_NESTING
+    if (not pVM->cpum.s.GuestFeatures.fVmx) {
+        return false;
+    }
+
+    uint64_t value {0};
+
+    AssertReleaseMsg(pVCpu->nem.s.guestModeStatOffset != 0, ("Invalid guest_mode offset"));
+
+    int rcRead = pread(pVCpu->nem.s.statsFd, &value, 8, pVCpu->nem.s.guestModeStatOffset);
+    AssertReleaseMsg(rcRead == 8, ("pread did not read all bytes: %d\n", rcRead));
+
+    return value != 0;
+#else
+    NOREF(pVM); NOREF(pVCpu);
+    return false;
+#endif
+}
+
 /**
  * Does the early setup of a KVM VM.
  *
@@ -498,6 +571,25 @@ static int nemR3LnxInitSetupVm(PVM pVM, PRTERRINFO pErrInfo)
 
         /* We want all x86 registers and events on each exit. */
         pVCpu->nem.s.pRun->kvm_valid_regs = KVM_SYNC_X86_REGS | KVM_SYNC_X86_SREGS | KVM_SYNC_X86_EVENTS;
+
+#ifdef VBOX_WITH_KVM_NESTING
+        pVCpu->nem.s.statsFd = ioctl(pVCpu->nem.s.fdVCpu, KVM_GET_STATS_FD, 0);
+
+        if (pVCpu->nem.s.statsFd < 0) {
+            return RTErrInfoSetF(pErrInfo, VERR_NEM_VM_CREATE_FAILED, "Failed to get stats FD");
+        }
+
+        int rc = KvmGetGuestModeOffsetFromStatsFd(pVCpu, &pVCpu->nem.s.guestModeStatOffset);
+        if (not RT_SUCCESS(rc)) {
+            // Instead of failing here, we could also de-feature nested hardware virtualization.
+            return RTErrInfoSetF(pErrInfo, VERR_NEM_VM_CREATE_FAILED, "Failed to get guest_mode offset");
+        }
+
+        if (idCpu == 0) {
+            // Log the offset once, just for debugging purposes.
+            LogRel2(("KVM: guest_mode offset is at %d\n", pVCpu->nem.s.guestModeStatOffset));
+        }
+#endif
     }
 
     pVM->nem.s.pARedirectionTable = std::make_unique<std::array<std::optional<MSIMSG>, KVM_IRQCHIP_NUM_IOAPIC_INTR_PINS>>();
@@ -3570,7 +3662,6 @@ static VBOXSTRICTRC nemHCLnxCheckAndInjectInterrupts(PVMCPUCC pVCpu)
 #endif
 }
 
-
 VBOXSTRICTRC nemR3NativeRunGC(PVM pVM, PVMCPU pVCpu)
 {
     /*
diff --git a/src/VBox/VMM/include/NEMInternal.h b/src/VBox/VMM/include/NEMInternal.h
index 35a7665f4f..a741fd64fb 100644
--- a/src/VBox/VMM/include/NEMInternal.h
+++ b/src/VBox/VMM/include/NEMInternal.h
@@ -375,6 +375,11 @@ typedef struct NEMCPU
     int32_t                     fdVCpu;
     /** Pointer to the KVM_RUN data exchange region. */
     R3PTRTYPE(struct kvm_run *) pRun;
+#ifdef VBOX_WITH_KVM_NESTING
+    /** KVM stats file descriptor for binary statistics */
+    int                         statsFd;
+    size_t                      guestModeStatOffset;
+#endif
 
 #if defined(IN_RING3) && defined(VBOX_WITH_KVM)
     /** The vCPU timer. */
-- 
2.43.0

